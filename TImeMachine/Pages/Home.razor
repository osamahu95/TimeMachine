@page "/"

<PageTitle>Home</PageTitle>

<h1>Convert to UTC DateTime</h1>

<div class="form-group p-1">
    <label for="dateInput">Select Date Time:</label>
    <input type="date" id="dateInput" class="form-control" @bind="selectedDate" />
</div>

<div class="form-group p-1">
    <label for="timeInput">Select Time:</label>
    <input type="time" id="timeInput" class="form-control" @bind="selectedTime" />
</div>

<div class="form-group p-1">
    <label for="timezoneSelect">Select TimeZone:</label>
    <select id="timezoneSelect" class="form-control" @bind="selectedTimeZone">
        <option value="">Select a Timezone</option>
        @foreach(var timezone in timeZones)
        {
            <option value="@timezone.Id">@timezone.DisplayName</option>
        }
    </select>
</div>

<button class="btn btn-primary mt-2" @onclick="handleGoClick">GO</button>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <div class="alert alert-info mt-3">@resultMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code{
    private DateOnly? selectedDate;
    private TimeOnly? selectedTime;
    private string selectedTimeZone = string.Empty;
    private string resultMessage = string.Empty;
    private string errorMessage = string.Empty;

    private List<TimeZoneInfo> timeZones = TimeZoneInfo.GetSystemTimeZones().ToList();

    private void handleGoClick(){
        // empty the resultMessage and errorMessage
        resultMessage = string.Empty;
        errorMessage = string.Empty;

        // Check if both the time and timezone is selected
        if (!selectedDate.HasValue || !selectedTime.HasValue || string.IsNullOrEmpty(selectedTimeZone))
        {
            errorMessage = "Please select all date, time and a timezone";
            return;
        }

        try
        {
            // find the selected TImeZone
            var timezoneInfo = timeZones.FirstOrDefault(tz => tz.Id == selectedTimeZone);
            if(timezoneInfo == null)
            {
                errorMessage = "Invalid TimeZone Selected.";
                return;
            }

            // combine the date and time
            var localDateTime = new DateTime(
                selectedDate.Value.Year,
                selectedDate.Value.Month,
                selectedDate.Value.Day,
                selectedTime.Value.Hour,
                selectedTime.Value.Minute,
                0
            );

            // convert local time to UTC
            var localDateTimeOffset = new DateTimeOffset(localDateTime, timezoneInfo.GetUtcOffset(localDateTime));
            var utcDateTime = localDateTimeOffset.ToUniversalTime();

            resultMessage = $"Local Time: {localDateTime:yyyy-MM-dd hh:mm tt} ({timezoneInfo.DisplayName})\n" +
                            $"UTC Time: {utcDateTime:yyyy-MM-dd hh:mm tt} UTC";
        }
        catch(Exception ex)
        {
            errorMessage = $"Error converting to UTC: {ex.Message}";
        }

    }
}
